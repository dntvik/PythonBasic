2.1
Написати програму, яка просить користувача ввести 4-х значне число з клавіатури, після чого друкує на екрані стовпчик цифр, з якого це число складається. Наприклад, користувач вводить 1234, а програма виводить:

1

2

3

4

Завдання необхідно вирішити, використовуючи методи поділу (підказка // і % або divmod). Виведення в стовпчик можна зробити за допомогою 4-х функцій print.

Користувач може ввести будь-яке 4 значне ціле число. Будь-яке 4-х значне число - це число, яке складається з 4-х цифр, де кожна цифра може бути від 0 до 9 включно.

Ваше рішення має це враховувати! Якщо користувач ввів не ціле число, це проблема користувача, а не вашої програми.

Створюйте рішення, виходячи з того, що число ЗАВЖДИ 4-х значне.

2.2
На запит від програми, користувач вводить 5-ти значне ціле, позитивне число. Вам необхідно "перевернути" цє число задом наперед, тобто щоб у результаті вийшло теж 5-ти значне число, але із зворотною послідовністю цифр.

Вам не потрібно перевіряти, що користувач ввів правильне число - зробіть вигляд, що користувач завжди вводить 5 значне число. Тобто введене користувачем число завжди складатиметься з 5 цифр.

Якщо користувач ввів інше число, це проблема користувача, а не вашої програми.

Використовуються лише цілі числа.

Для розв'язання задачі потрібно використовувати лише той зріз даних, який було пройдено. Тобто використовувати строки не можна.

Приклади:

Користувач ввів: 12345 - на екрані відображається: 54321

Користувач ввів: 37568 - на екран відображається: 86573

3.1
Програма має виконувати прості математичні дії (+, -, *, /). Користувачеві пропонується почерзі ввести числа та дію над цими числами, а програма, виходячи з дії, обчислює та друкує результат.

3.2
Ваша програма має перенести останній елемент списку з кінця на початок, тобто, останній елемент списку має стати першим. Послідовність інших елементів не має змінюватися.

Порожній список або список з одним елементом повинен залишитися незмінним.

Кількість елементів у списку може бути будь-яким – нуль та більше!

3.3
Ваша програма повинна вміти розділяти один список на два та помістити їх у новий список. Тобто, в результаті повинен вийти список із 2-х списків.

Якщо в початковому списку непарна кількість елементів, то в першому списку має бути більше елементів.

Якщо у списку немає елементів, то має бути створений список із двома порожніми списками.

Важливо! Потрібно створити рішення, яке обробляє 3 випадки - список порожній, у списку парна кількість елементів і в списку непарна кількість елементів.

4.1
Написати програму, яка переміщає всі нулі у кінець списку.

Ваше завдання — змінити список так, щоб усі нулі опинилися наприкінці списку.

Порядок ненульових чисел має зберегтися!

4.2
Для списку цілих чисел потрібно знайти суму елементів із парними індексами [0-й, 2-й, 4-й ітд], потім перемножити цю суму на останній елемент вхідного масиву.

Не забудьте, що перший елемент масиву має індекс 0.

Для порожнього масиву результат завжди 0.

4.3
Створіть список випадкових чисел із випадковою кількістю елементів від 3 до 10.

Ваше завдання - створити новий список з 3 елементів початкового списку - першим, третім і другим з кінця.

5.1
Користувач вводить рядок. Ваше завдання - перевірити, чи може цей рядок бути ім'ям змінної.

Змінна не може:

починатися з цифри
містити великі літери,
пробіл і знаки пунктуації (взяти можна тут string.punctuation), окрім нижнього підкреслення "_".
бути жодним із зареєстрованих слів.
При цьому повне ім'я змінної повино складатись не більш чим з одного нижнього підкреслення "_".

Список зареєстрованих слів можна взяти із keyword.kwlist.

У результаті перевірки на друк виводиться або True, якщо таке ім'я змінної допустимо, або False - якщо ні.

Приклади імен змінних та результат перевірки (=> на друк виводити не потрібно :))

5.2
Модифікувати калькулятор таким чином, щоб він працював доти, доки користувач цього хоче. Тобто, потрібно робити запит до користувача на продовження роботи калькулятора після кожного обчислення - якщо користувач ввів yes (можна просто y), то нове обчислення, інакше - закінчення роботи.

5.3
Користувач вводить рядок, Ваше завдання – перетворити рядок на hashtag.

Декілька правил:

ніяких символів з набору string.punctuation не повинно бути, у тому числі й пробілів;
підсумкова довжина hashtag має бути не більше 140 символів.
кожне слово починається з великої літери.
якщо довжина фінішного хештегу більше 140 символів - обрізати підсумковий рядок до 140 символів.

6.1
Користувач вводить через дефіс дві літери, Ваше завдання написати програму, яка повертатиме всі символи між ними включно.

Жодних перевірок на помилку робити не треба, мінімальне значення завжди менше або дорівнює максимальному.

Підказка: Використовуйте модуль string , у якому є string.ascii_letters, з усім набором потрібних букв

6.2
Ваше завдання — написати програму, яка переводить число у формат часу у читальному вигляді.

Користувач повинен ввести число більше або дорівнює 0 і менше ніж 8640000.

Число, яке є кількістю секунд, необхідно перевести в дні, години, хвилини та секунди.

Ну і додатковим завданням є турбота про виведення.

Слово "день" підбирається на основі кількості днів, а години, хвилини і секунди повинні заповнюватися нулями при одноцифрових значеннях.

Підказка: одна хвилина - 60 сек. , В одній годині 60 * 60 сек, в одній добі 24 * 60 * 60 сек. Тобто використовуючи функцію divmod або методи поділу // і % вам необхідно знайти відповідну кількість днів, годин, хвилин, а те що залишиться - це секунди, які менше 60 ;)

Доповнити провідними нулями можна за допомогою методу zfill(2)

6.3
Ваше завдання — написати програму, яка перемножує всі цифри, введені користувачем цілого числа, поки воно не стане менше або дорівнювати 9.

Користувач вводить число з клавіатури.

7.1
Написати функцію say_hi, яка представить людину за переданими параметрами.

Вхідні дані: Два аргументи рядок(str) та позитивне число(int)

Функція має повернути рядок.

7.2
На вхід функції correct_sentence передається два речення. Необхідно повернути їх виправлену копію так, щоб вони завжди починалися з великої літери та закінчувалися крапкою.

Зверніть увагу, що не всі виправлення необхідні. Якщо речення вже закінчується крапкою, додавати ще одну не потрібно, це буде помилкою

Вхідні аргументи: string.

Вихідні аргументи: string.

7.3
Функція second_index приймає як параметри 2 рядки. Вам необхідно знайти індекс другого входження шуканого рядка у рядку для пошуку.

Розберемо перший приклад, де необхідно знайти друге входження "s" в слові "sims". Якби нам треба було знайти її перше входження, то тут все просто: за допомогою функції index або find ми можемо дізнатися, що "s" - це перший символ у слові "sims", а значить індекс першого входження дорівнює 0. Але нам Необхідно визначити другу "s", а вона четверта за рахунком. Значить індекс другого входження (і у відповідь питання) дорівнює 3.

Рядок, який потрібно знайти, може складатися з кількох символів.

Input: Два рядки (String).

Output: Int or None

7.4
Напишіть функцію common_elements, яка згенерує два списки елементів з генераторного виразу (range) для 100 елементів, за наступними правилом:

Один список з числами кратними 3, інший з кратними числами 5.

За допомогою множин створіть набір з числами, які є в обох множинах (перетин).

Функція повинна повернути цю множину як результат своєї роботи.

8.1
Ваше завдання — написати функцію add_one, яка приймає список із цифр, які у свою чергу є одним числом. До нього необхідно додати 1.

Тобто. Вам необхідно з набору цифр, що входять до списку, отримати число, скласти його з 1 і отриману суму, знову розбити на список із цифр.

В результаті функція повертає список із цифр, що становлять значення суми.

Так зі списку з цифрами [1, 2, 3, 4], має вийти число 1234. До нього додаємо 1, і отримуємо 1235. Після цього потрібно розбити отримане число на складові цифри. У результаті має бути список [1, 2, 3, 5], який повертає функція.

8.2
Ваше завдання – написати функцію is_palindrome, яка перевірятиме, чи є рядок паліндромом.

Паліндромом - це такий рядок, який читається однаково зліва направо і зправа наліво без урахування знаків пунктуації та розмірності букв.

Функція приймає на вхід рядок, та повертає булеве значення True або False

8.3
Вам необхідно написати функцію find_unique_value, яка приймає список із чисел, знаходить серед них унікальне число та повертати його. Унікальне число - це число, яке зустрічається в списку один раз. Випадок, коли в одному списку буде кілька унікальних чисел, перевіряти не потрібно.

9.1
На вхід функції popular_words передаються два аргументи. Текст та список слів, популярність яких необхідно визначити.

При вирішенні цього завдання зверніть увагу на такі моменти

Слова необхідно шукати у всіх регістрах. Тобто. якщо необхідно знайти слово "one", значить для нього будуть підходити слова "one", "One", "oNe", "ONE" і т.д.
Шукані слова завжди вказані в нижньому регістрі
Якщо слово не знайдено жодного разу, його необхідно повернути у словнику зі значенням 0 (нуль)
Вхідні параметри: Текст і масив слів, що шукаються.

Вихідні параметри: Словник, у якому ключами є шукані слова та значеннями, скільки разів кожнє слово зустрічаються у орігінальному тексті.

9.2
Є набір чисел (float або int). Вам потрібно знайти різницю між найбільшим (максимум) і найменшим (мінімум) елементом. Ваша функція difference має вміти працювати з невизначеною кількістю аргументів. Якщо аргументів немає, то функція повертає 0 (нуль).

Якщо з 3-м тестом будуть проблеми, використовуйте функцію округлення round(x, 2), де х це число, яке потрібно округлити.

Вх. Дані: Змінна кількість аргументів як числа (int, float).

Вих. Дані: Різниця між максимумом і мінімумом як число (int, float).

10.1
Реалізуйте генераторну функцію (з використанням оператора yield), яка повертатиме по одному члену числової послідовності, закон якої задається за допомогою функції користувача. Крім цього параметром генераторної функції повинні бути значення першого члена прогресії та кількість членів, що видаються послідовності (n). Генератор повинен зупинити свою роботу з досягнення n-го члена.

Підказка: це завдання дуже схоже на нескінченний лічильник з матеріалів лекції! Потрібно лише обмежити кількість видаваних генератором значень!

10.2
Напишіть функцію first_word, яка у переданому рядку знайде її перше слово.

При розв'язанні задачі зверніть увагу на наступні моменти:

У рядку можуть зустрічаються крапки та/або коми
Рядок може починатися з літери або, наприклад, з пробілу або точки
У слові може бути апостроф і він є частиною слова
Весь текст може бути представлений лише одним словом та все
Вхідні параметри: Рядок.

Вихідні параметри: Рядок.

10.3
Ваша функція is_even повинна повертати True якщо число парне, і False якщо число непарне.

Вхідні дані: Ціле число.

Вихідні дані: Логічний тип.

11.1
Напишіть функцію-генератор prime_generator, яка повертатиме прості числа. Верхня межа цього діапазону визначається параметром цієї функції.

Наприклад, виклик функції

list(prime_generator(10)) повинен відповідати послідовності з чисел [2, 3, 5, 7] .

Наступне число в цій послідовності - 11 і воно більше 10 тому воно не потрапляє в цей ряд

11.2
Напишіть функцію-генератор generate_cube_numbers, яка формує набір кубів чисел, починаючи з числа 2 до вказаної Вами величини. Тобто. генератор повинен працювати доти, поки генерується значення менше зазначеної величини.

Нагадую, що вийти із генератора можна за допомогою return без параметрів.

11.3
Завдання ускладнюється.

Ваша функція is_even, як і раніше, повинна повертати True якщо число парне, або False якщо число непарне, але при цьому НЕ МОЖНА використовувати ділення у функції, та дії пов'язані з ним. Тобто. заборонено використовувати /, //, % та divmod

Складність ще полягає і в тому, щоб знайти рішення, яке не залежало б від розміру числа :)

Вхідні дані: Ціле число.

Вихідні дані: True або False
